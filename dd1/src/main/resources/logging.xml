<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!--多环境配置日志-->
    <!-- 测试环境+开发环境. 多个使用逗号隔开. -->
    <!--<springProfile name="test,dev">-->
        <!--<logger name="com.example.demo.controller" level="DEBUG" additivity="false">-->
            <!--<appender-ref ref="consoleLog"/>-->
        <!--</logger>-->
    <!--</springProfile>-->
    <!--<springProfile name="staging">-->
        <!--&lt;!&ndash; configuration to be enabled when the "staging" profile is active &ndash;&gt;-->
    <!--</springProfile>-->
    <!--<springProfile name="dev, staging">-->
        <!--&lt;!&ndash; configuration to be enabled when the "dev" or "staging" profiles are active &ndash;&gt;-->
    <!--</springProfile>-->
    <!--<springProfile name="!production">-->
        <!--&lt;!&ndash; configuration to be enabled when the "production" profile is not active &ndash;&gt;-->
    <!--</springProfile>-->



    <contextName>dd1-demo</contextName>

    <!--定义变量，定义变量后，可以使“${}”来使用变量-->
    <property name="logback.dir" value="E:\\code_workspace\\java\\dd1\\src\\main"/>
    <property name="logback.name" value="dddapp"/>

    <!--输出到控制台 ConsoleAppender-->
    <appender name="consoleLog1" class="ch.qos.logback.core.ConsoleAppender">
        <!--展示格式 layout-->
        <layout class="ch.qos.logback.classic.PatternLayout">
        <pattern>
            <!--常用的格式有 %d{DATE}, %d{ABSOLUTE}, %d{HH:mm:ss,SSS}, %d{ddMMyyyy HH:mm:ss,SSS}-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName  %-5level [%thread] %logger{42} - %msg%n</pattern>
        </pattern>
    </layout>
    </appender>



    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
        所以我们使用下面的策略，可以避免输出 Error 的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤 Error-->
            <level>ERROR</level>
            <!--匹配到就禁止-->
            <onMatch>DENY</onMatch>
            <!--没有匹配到就允许-->
            <onMismatch>ACCEPT</onMismatch>
        </filter>
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
            的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
        <!--<File>${logback.logdir}/info.${logback.appname}.log</File>-->
        <file>${logback.dir}/${logback.name}</file>

        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <!--TimeBasedFileNamingAndTriggeringPolicy，如果需要按照多久输出日志，就必须自己实现该接口-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <!--<FileNamePattern>${log.logdir}/11111111111111info.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>-->
            <fileNamePattern>${logback.dir}/${logback.name}-%d{yyyy-MM-dd-HH-mm}.%i.log</fileNamePattern>

            <!--只保留最近90天的日志-->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->

            <!--嵌套文件大小和时间满足其一，就分割日志-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- or whenever the file size reaches 100MB -->
                <maxFileSize>1KB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
        <!--日志输出编码格式化-->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName  %-5level [%thread] %logger{42} - %msg%n</pattern>
        </encoder>



        <!--日志文件最大的大小  配置了文件大小，当文件到了指定的大小才会创建新文件-->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
          <!--<maxFileSize>10MB</maxFileSize>-->
        <!--</triggeringPolicy>-->
        <!--<encoder>-->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>-->
        <!--</encoder>-->

    </appender>

    <!--输出到控制台 ConsoleAppender-->
    <!--<appender name="consoleLog2" class="ch.qos.logback.core.ConsoleAppender">-->
        <!--<encoder>-->
            <!--<pattern>%d -2 %msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->

    <!--指定最基础的日志输出级别-->
    <root level="warn">
        <!--appender将会添加到这个loger-->
        <appender-ref ref="consoleLog1"/>
        <appender-ref ref="fileInfoLog"/>
    </root>

    <logger name="com.example.dd1.controller.UserOpsController" level="info" additivity="false">
        <appender-ref ref="consoleLog1"/>
        <appender-ref ref="fileInfoLog"/>
    </logger>

    <!--默认向上传递-->
    <!--<logger name="com.example.demo.controller"/>-->


</configuration>